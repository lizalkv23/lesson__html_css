/*
"use strict" - строгий режим
Пишется первым в коде, за исключением комментариев
*/

"use strict"
console.log('hello world');
/*
console.log('учу')
console.log('JS')
допускаеться без ;, но не желательно, может привести к ошибке при сжатии файла или при выполнении определённых инструкций.
*/
/*
console.log('учу');
console.log('JS');
правильно
*/
/*
console.log('учу') console.log('JS')
ошибка
*/
console.log('учу');
console.log('JS');
// 

/*
coNsole.log('учу js');
ошибка, потому что js регистро-зависимый язык и не допускается такая запись. Нужно писать в нижнем регистре.
*/
/*
переменные js. let и const
let- переменная которая может менять свое значение. Значение может присваеваться по ходу написания кода, не обязательно сразу, как в случае с const.
const - это константа (постоянная), значение присваевается сразу и не может меняться.
Каждой переменной нужно дать имя. Имя должно(рекомендованно) быть написано латинецей, допускаются символы $ и _ (остальные вызовут ошибку), не должно начинаться с цифры, не может быть названна зарезервированым именем(который использует сам js), пишем в "верблюжем стиле". Имя переменной должно отображать то что мы туда хотим положить, соответствовать содержимому.
*/
let myName = 'Liza'; // присвоение значение сразу
console.log(myName);
myName  = 'Yelizaveta';// мы можем менять значение по ходу написания кода. Объявлять переменую уже не нужно.
console.log(myName);


let mySurname;
mySurname = 'Lykova'; 
//присвоение значения по ходу написания кода. объявлять переменую повторно уже не нужно.
const mySunName = 'Miron'; //если мы не зададим  сразу значение, это вызовет ошибку
console.log(mySunName);
//  mySunName= 'Mironchik'; эта запись вызовет ошибку, нельзя менять в константе значение.


let myAge = 31;
let myAgeDream = 18;
myAge = myAgeDream;
console.log(myAge);// меняем значение одной переменной на другую. 
//так же можно одной не давать значение, а присвоить его через оператор = .


 //console.log(userAge);// вызовет ошибку так как еще не объявленна переменная.

let userAge = 20;

 if (30> 20){
   let userAge = 25;//переменная в отдельном блоке может содержать такое же имя как и за его приделами, потому что оно находится не в области видимости для тех кто находится вне блока.
 }
 console.log(userAge); // не вызовет ошибку

 const FONE_SIZE = 50 + 20;// если нам известно (до написания кода) значение которое не будет менять, принято использовать именна в верхнем регистре и разделять нижним подчеркиванием.
 console.log(FONE_SIZE);
 
 // Задание по видео №3

 const COLOR_EYES = 'green';

 let userName = 'Evgeniy';
 let user;
 user = userName;
 console.log(user);


 // Вариант 1 - ошибка
 // Вариант 2 - ( не вызовет ошибку), но не верно, так как мы используем "верблюжий" стиль для разделения двух и более слов (а в примере два слова)
 // Вариант 3 и 4 верный
 if (true){
   var size= 15;
 }
console.log(size);//Вариант 5 верный


// Типы данных
// typeof - выводит тип данных в консоль

// undefined -неопределеность
let age;//нет значения для переменной
console.log(typeof age);

// null - пустота
let youAge = null;
console.log(youAge);
console.log(typeof youAge);// значение null а тип object (баг для совместимости определённых данных)


// number - число
let youNumber = 10;
console.log(typeof youNumber);// number  значение пишется без кавычек. Можно использовать дробные числа. Если использовать выражение со строчным типом, вызовет в консоли NaN.
let myInfo = 'liza' / 20;
console.log(myInfo);// пример NaN

// string -строка
let youLastName = "name";
console.log(typeof youLastName);//  значение типа данных "string" пишется в кавычках. Если мы укажем число в кавычках, оно поменяет тип данных на string ( если не использован оператор) Есть три вида  кавычек : одинарные, двойные, обратные. первые и вторые идентичные. обратные помогают строить выражения.
let myLastName2 = `имя: ${youLastName}`;// пример с обратными кавычками
// ` имя: ${}`;
console.log(myLastName2);

// boolean - имеет два значения false и true.
let youFeeling = true;
if(youFeeling){
   console.log(':)');
} else {
   console.log(':(')
}
// let youFeeling = false;
// if(youFeeling){
//    console.log(':)');
// } else {
//    console.log(':(')
// }
console.log(typeof youFeeling);

// можно принудительно поменять тип даных записав с большой буквы нужный нам тип и ставим скобки. (пример) Boolean()

// домашка №4
// вариан 1 - ошибка. для такой записи нужно использовать обратные кавычки
// вариант 2 - выведет значение infinity.
//вариант 3 - будет тип данных undefined, так как мы не задали значение для переменной
//вариант 4 - верно. оператор / возвращает значение number.